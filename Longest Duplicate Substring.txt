Given a string S, consider all duplicated substrings: (contiguous) substrings of S that occur 2 or more times.  (The occurrences may overlap.)

Return any duplicated substring that has the longest possible length.  (If S does not have a duplicated substring, the answer is "".)

 

Example 1:

Input: "banana"
Output: "ana"
Example 2:

Input: "abcd"
Output: ""
 

Note:

2 <= S.length <= 10^5
S consists of lowercase English letters.















class Solution {
    long mod=0;
    public String longestDupSubstring(String S) {
      mod=(long)1<<32;int n=S.length();
        int l=1,r=n; char[] nums=S.toCharArray();
        while(l<=r)
        {
            int mid=l+(r-l)/2;
            if(search(mid,n,nums)!=-1) l=mid+1;
            else
                r=mid-1;
        }
        int start=search(l-1,n,nums);
        return S.substring(start,start+l-1);
    }
    int search(int l, int n, char[] nums)
    {
        long h=0;
        for(int i=0;i<l;i++)
        {
            h=(h*26+ (nums[i]-'a'))%mod;
        }
        
        Set<Long> set=new HashSet<>();
        set.add(h);
        long aL=1;
        for(int i=1;i<=l;++i) aL=(aL*26)%mod;
        for(int i=1;i<n-l+1;i++)
        {
            h=(long)(h*26-(nums[i-1]-'a')*aL%mod +mod)%mod;
            h=(h+(nums[i+l-1]-'a'))%mod;
            if(set.contains(h))
                return i;
            set.add(h);
        }
        return -1;
    }
}