In a binary tree, the root node is at depth 0, and children of each depth k node are at depth k+1.

Two nodes of a binary tree are cousins if they have the same depth, but have different parents.

We are given the root of a binary tree with unique values, and the values x and y of two different nodes in the tree.

Return true if and only if the nodes corresponding to the values x and y are cousins.

 

Example 1:


Input: root = [1,2,3,4], x = 4, y = 3
Output: false
Example 2:


Input: root = [1,2,3,null,4,null,5], x = 5, y = 4
Output: true
Example 3:



Input: root = [1,2,3,null,4], x = 2, y = 3
Output: false
 

Constraints:

The number of nodes in the tree will be between 2 and 100.
Each node has a unique integer value from 1 to 100.













/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean isCousins(TreeNode root, int x, int y) {
        Pair p1=cousinHelper(root,x,0,root);
        Pair p2=cousinHelper(root,y,0,root);
        return p1.depth==p2.depth&&p1.parent!=p2.parent;
        }
    public Pair cousinHelper(TreeNode node,int val, int level, TreeNode parent){
        if(node==null)
        {
            return null;
        }
    if(node.val==val)
    {
        return new Pair(parent,level);
    }
    Pair leftpair=cousinHelper(node.left,val,level+1,node);
    if(leftpair!=null)
        return leftpair;
    return cousinHelper(node.right,val,level+1,node);
    }
    }
class Pair{
    TreeNode parent; int depth;
    Pair(TreeNode parent, int depth){
        this.parent=parent; this.depth=depth;
    }
}