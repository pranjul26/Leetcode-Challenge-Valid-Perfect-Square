Implement a trie with insert, search, and startsWith methods.

Example:

Trie trie = new Trie();

trie.insert("apple");
trie.search("apple");   // returns true
trie.search("app");     // returns false
trie.startsWith("app"); // returns true
trie.insert("app");   
trie.search("app");     // returns true
Note:

You may assume that all inputs are consist of lowercase letters a-z.
All inputs are guaranteed to be non-empty strings.




class Trie {
    HashSet<String>words;
    HashSet<String>prefixs;
    
    /** Initialize your data structure here. */
    public Trie() {
        words=new HashSet<>();
        prefixs=new HashSet<>();
    }
    
    /** Inserts a word into the trie. */
    public void insert(String word) {
        words.add(word);
        
        StringBuilder sb=new StringBuilder();
        for(int i=0;i<word.length();i++)
        {
            sb.append(word.charAt(i));
            prefixs.add(sb.toString());
        }
    }
    
    /** Returns if the word is in the trie. */
    public boolean search(String word) {
        if(words.contains(word))
            return true;
        
        return false;
    }
    
    /** Returns if there is any word in the trie that starts with the given prefix. */
    public boolean startsWith(String prefix) {
        if(prefixs.contains(prefix))
            return true;
        
        return false;
    }
}

/**
 * Your Trie object will be instantiated and called as such:
 * Trie obj = new Trie();
 * obj.insert(word);
 * boolean param_2 = obj.search(word);
 * boolean param_3 = obj.startsWith(prefix);
 */